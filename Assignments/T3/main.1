#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 8.0 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 34 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mrl"
 #"ib\"))\x00"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 79
(1
 #"((lib \"srcloc-snip.rkt\" \"framework\") (lib \"wxme-srcloc-snip.rkt"
 #"\" \"framework\"))\x00"
) 1 0 93
(2
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-snip"
 #"class-wxme.ss\" \"framework\"))\x00"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(3
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsis"
 #"-snip-wxme.rkt\" \"drracket\" \"private\"))\x00"
) 2 0 88
(4
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.rk"
 #"t\" \"drracket\" \"private\"))\x00"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 62 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 90 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 255 255 0 0 0 -1
-1 2 37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 90 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 255 255 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 92 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 128 0 0 0 0 -1
-1 2 38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 92 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 128 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 0 255 0 0 0 0 -1 -1
2 38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 0 255 0 0 0 0 -1 -1
2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 0 255 255 0 0 0 -1
-1 2 37 #"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 0 255 255 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 90 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 0 128 255 0 0 0 -1
-1 2 35 #"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 90 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 0 128 255 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 92 -1 90 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 255 0 0 0 0 -1
-1 2 39 #"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 92 -1 90 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 255 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 128 255 0 0 0 -1
-1 2 49 #"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 128 255 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 184 184 184 0 0 0 -1
-1 2 42 #"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 184 184 184 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 92 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 92 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 0 255 0 0 0 -1
-1 2 36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1 1 1 255 0 255 0 0 0 -1
-1 2 16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
48 #"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 0 36
#"mrlib/syntax-browser:subtitle-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 100 149 237 19 19 19 -1 -1
0 42 #"mrlib/syntax-browser:focused-syntax-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 50 205 50 19 19 19 -1 -1 4
1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 191 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 191 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 152 251 152 0 0 0
-1 -1           0 2552 0 32 3 10 #"#lang play"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 2 #"#|"
0 0 18 29 1 #"\n"
0 0 18 3 16 #"<expr> ::= <num>"
0 0 18 29 1 #"\n"
0 0 18 3 15 #"         | <id>"
0 0 18 29 1 #"\n"
0 0 18 3 17 #"         | <bool>"
0 0 18 29 1 #"\n"
0 0 18 3 36 #"         | (if <expr> <expr> <expr>)"
0 0 18 29 1 #"\n"
0 0 18 3 28 #"         | (+ <expr> <expr>)"
0 0 18 29 1 #"\n"
0 0 18 3 32 #"         | '< <s-expr> <s-expr>)"
0 0 18 29 1 #"\n"
0 0 18 3 32 #"         | (* <s-expr> <s-expr>)"
0 0 18 29 1 #"\n"
0 0 18 3 32 #"         | (= <s-expr> <s-expr>)"
0 0 18 29 1 #"\n"
0 0 18 3 25 #"         | (- <s-expr> <s"
0 0 18 3 7 #"-expr>)"
0 0 18 29 1 #"\n"
0 0 18 3 34 #"         | (and <s-expr> <s-expr>)"
0 0 18 29 1 #"\n"
0 0 18 3 33 #"         | (or <s-expr> <s-expr>)"
0 0 18 29 1 #"\n"
0 0 18 3 34 #"         | (not <s-expr> <s-expr>)"
0 0 18 29 1 #"\n"
0 0 18 3 31 #"         | (seqn <expr> <expr>)"
0 0 18 29 1 #"\n"
0 0 18 3 38 #"         | (local { <def> ...} <expr>)"
0 0 18 29 1 #"\n"
0 0 18 29 1 #"\n"
0 0 18 3 33 #"<def>    ::= (define <id> <expr>)"
0 0 18 29 1 #"\n"
0 0 18 29 1 #"\n"
0 0 18 29 1 #"\n"
0 0 18 3 23 #";EXTENSION PARA OBJETOS"
0 0 18 29 1 #"\n"
0 0 18 3 12 #"<expr>  ::= "
0 0 18 3 22 #"... (todo lo anterior)"
0 0 18 29 1 #"\n"
0 0 18 3 43 #"         | (object [: <expr>] <member> ...)"
0 0 18 29 1 #"\n"
0 0 18 3 15 #"         | this"
0 0 18 29 1 #"\n"
0 0 18 3 28 #"         | (set <id> <expr>)"
0 0 18 29 1 #"\n"
0 0 18 3 21 #"         | (get <id>)"
0 0 18 29 1 #"\n"
0 0 18 3 40 #"         | (send <expr> <id> <expr> ...)"
0 0 18 29 1 #"\n"
0 0 18 3 32 #"         | (shallow-copy <expr>)"
0 0 18 29 1 #"\n"
0 0 18 3 29 #"         | (deep-copy <expr>)"
0 0 18 29 1 #"\n"
0 0 18 29 1 #"\n"
0 0 18 3 12 #"<member> ::="
0 0 18 29 1 #"\n"
0 0 18 3 4 #"    "
0 0 18 3 27 #"    | (field <id> <s-expr>)"
0 0 18 29 1 #"\n"
0 0 18 3 48 #"        | (method <id> (list <id> ...) <s-expr>)"
0 0 18 29 1 #"\n"
0 0 18 29 1 #"\n"
0 0 18 3 2 #"|#"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 7 #"deftype"
0 0 28 3 1 #" "
0 0 14 3 4 #"Expr"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 3 #"num"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 4 #"bool"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 2 #"id"
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 5 #"binop"
0 0 28 3 1 #" "
0 0 14 3 1 #"f"
0 0 28 3 1 #" "
0 0 14 3 1 #"l"
0 0 28 3 1 #" "
0 0 14 3 1 #"r"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 4 #"unop"
0 0 28 3 1 #" "
0 0 14 3 1 #"f"
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 5 #"my-if"
0 0 28 3 1 #" "
0 0 14 3 1 #"c"
0 0 28 3 1 #" "
0 0 14 3 2 #"tb"
0 0 28 3 1 #" "
0 0 14 3 2 #"fb"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 4 #"seqn"
0 0 28 3 1 #" "
0 0 14 3 5 #"expr1"
0 0 28 3 1 #" "
0 0 14 3 5 #"expr2"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 4 #"lcal"
0 0 28 3 1 #" "
0 0 16 3 4 #"defs"
0 0 28 3 1 #" "
0 0 14 3 4 #"body"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 6 #"object"
0 0 28 3 1 #" "
0 0 14 3 6 #"target"
0 0 28 3 1 #" "
0 0 14 3 7 #"members"
0 0 28 3 2 #") "
0 0 18 3 45 #"; From here we have the extension for objects"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 4 #"this"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 3 #"set"
0 0 28 3 1 #" "
0 0 14 3 2 #"id"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 3 #"get"
0 0 28 3 1 #" "
0 0 14 3 2 #"id"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 4 #"send"
0 0 28 3 1 #" "
0 0 14 3 3 #"obj"
0 0 28 3 1 #" "
0 0 14 3 3 #"met"
0 0 28 3 1 #" "
0 0 14 3 4 #"vals"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 12 #"shallow-copy"
0 0 28 3 1 #" "
0 0 14 3 4 #"expr"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 9 #"deep-copy"
0 0 28 3 1 #" "
0 0 14 3 4 #"expr"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 9 #";; values"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 7 #"deftype"
0 0 28 3 1 #" "
0 0 14 3 3 #"Val"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 4 #"numV"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 5 #"boolV"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 7 #"ObjectV"
0 0 28 3 1 #" "
0 0 14 3 6 #"target"
0 0 28 3 1 #" "
0 0 14 3 7 #"members"
0 0 28 3 1 #" "
0 0 14 3 4 #"oenv"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 10 #";; members"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 7 #"deftype"
0 0 28 3 1 #" "
0 0 14 3 6 #"Member"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 5 #"field"
0 0 28 3 1 #" "
0 0 14 3 2 #"id"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 6 #"method"
0 0 28 3 1 #" "
0 0 14 3 2 #"id"
0 0 28 3 1 #" "
0 0 14 3 4 #"vals"
0 0 28 3 1 #" "
0 0 14 3 4 #"body"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 7 #"deftype"
0 0 28 3 1 #" "
0 0 14 3 3 #"Def"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 6 #"my-def"
0 0 28 3 1 #" "
0 0 14 3 2 #"id"
0 0 28 3 1 #" "
0 0 14 3 4 #"expr"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 79
(5
 #";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
 #";;;;;;;;;;"
) 0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 2 #"#|"
0 0 18 29 1 #"\n"
0 0 18 3 30 #"Environment abstract data type"
0 0 18 29 1 #"\n"
0 0 18 29 1 #"\n"
0 0 18 3 23 #"empty-env        :: Env"
0 0 18 29 1 #"\n"
0 0 18 3 34 #"env-lookup       :: Sym Env -> Val"
0 0 18 29 1 #"\n"
0 0 18 3 28 #"multi-extend-env :: List<Sym"
0 0 18 3 22 #"> List<Val> Env -> Env"
0 0 18 29 1 #"\n"
0 0 18 3 39 #"extend-frame-env! :: Sym Val Env -> Env"
0 0 18 29 1 #"\n"
0 0 18 29 1 #"\n"
0 0 18 29 1 #"\n"
0 0 18 3 19 #"representation BNF:"
0 0 18 29 1 #"\n"
0 0 18 3 17 #"<env> ::= (mtEnv)"
0 0 18 29 1 #"\n"
0 0 18 3 33 #"        | (aEnv <id> <val> <env>)"
0 0 18 29 1 #"\n"
0 0 18 3 2 #"|#"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 7 #"deftype"
0 0 28 3 1 #" "
0 0 14 3 3 #"Env"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 5 #"mtEnv"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 4 #"aEnv"
0 0 28 3 1 #" "
0 0 14 3 4 #"hash"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 3 #"def"
0 0 28 3 1 #" "
0 0 14 3 9 #"empty-env"
0 0 28 3 2 #" ("
0 0 14 3 5 #"mtEnv"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 2 #"#|"
0 0 18 29 1 #"\n"
0 0 18 3 27 #"env-lookup:: Sym Env -> Val"
0 0 18 29 1 #"\n"
0 0 18 3 17 #"Busca un s\303\255mbolo"
0 0 18 3 46 #" en el ambiente, retornando su valor asociado."
0 0 18 29 1 #"\n"
0 0 18 3 2 #"|#"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 10 #"env-lookup"
0 0 28 3 1 #" "
0 0 14 3 1 #"x"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 5 #"match"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 5 #"mtEnv"
0 0 28 3 3 #") ("
0 0 14 3 5 #"error"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 10 #"env-lookup"
0 0 28 3 1 #" "
0 0 20 3 21 #"\"free identifier: ~a\""
0 0 28 3 1 #" "
0 0 14 3 1 #"x"
0 0 28 3 2 #")]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"aEnv"
0 0 28 3 1 #" "
0 0 14 3 4 #"hash"
0 0 28 3 1 #" "
0 0 14 3 4 #"rest"
0 0 28 3 3 #") ("
0 0 14 3 8 #"hash-ref"
0 0 28 3 1 #" "
0 0 14 3 4 #"hash"
0 0 28 3 1 #" "
0 0 14 3 1 #"x"
0 0 28 3 2 #" ("
0 0 16 3 2 #"\316\273"
0 0 28 3 5 #" () ("
0 0 14 3 10 #"env-lookup"
0 0 28 3 1 #" "
0 0 14 3 1 #"x"
0 0 28 3 1 #" "
0 0 14 3 4 #"rest"
0 0 28 3 6 #")))]))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 2 #"#|"
0 0 18 29 1 #"\n"
0 0 18 3 50 #"multi-extend-env:: List(Sym) List(Expr) Env -> Env"
0 0 18 29 1 #"\n"
0 0 18 3 61
#"Crea un nuevo ambiente asociando los s\303\255mbolos a sus valores."
0 0 18 29 1 #"\n"
0 0 18 3 2 #"|#"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 16 #"multi-extend-env"
0 0 28 3 1 #" "
0 0 14 3 3 #"ids"
0 0 28 3 1 #" "
0 0 14 3 5 #"exprs"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 1 #"="
0 0 28 3 2 #" ("
0 0 14 3 6 #"length"
0 0 28 3 1 #" "
0 0 14 3 3 #"ids"
0 0 28 3 3 #") ("
0 0 14 3 6 #"length"
0 0 28 3 1 #" "
0 0 14 3 5 #"exprs"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"      ("
0 0 14 3 4 #"aEnv"
0 0 28 3 2 #" ("
0 0 14 3 19 #"make-immutable-hash"
0 0 28 3 2 #" ("
0 0 14 3 3 #"map"
0 0 28 3 1 #" "
0 0 14 3 4 #"cons"
0 0 28 3 1 #" "
0 0 14 3 3 #"ids"
0 0 28 3 1 #" "
0 0 14 3 5 #"exprs"
0 0 28 3 3 #")) "
0 0 14 3 3 #"env"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"      ("
0 0 14 3 5 #"error"
0 0 28 3 1 #" "
0 0 20 3 33 #"\"wrong_input, mismatched lengths\""
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 2 #"#|"
0 0 18 29 1 #"\n"
0 0 18 3 39 #"extend-frame-env!:: Sym Val Env -> Void"
0 0 18 29 1 #"\n"
0 0 18 3 60
#"Agrega un nuevo par (Sym, Val) al ambiente usando mutaci\303\263n."
0 0 18 29 1 #"\n"
0 0 18 3 39 #"Este m\303\251todo no crea un nuevo ambiente."
0 0 18 29 1 #"\n"
0 0 18 3 2 #"|#"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 17 #"extend-frame-env!"
0 0 28 3 1 #" "
0 0 14 3 2 #"id"
0 0 28 3 1 #" "
0 0 14 3 3 #"val"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 5 #"match"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 5 #"mtEnv"
0 0 28 3 3 #") ("
0 0 14 3 4 #"aEnv"
0 0 28 3 2 #" ("
0 0 14 3 4 #"hash"
0 0 28 3 1 #" "
0 0 14 3 2 #"id"
0 0 28 3 1 #" "
0 0 14 3 3 #"val"
0 0 28 3 2 #") "
0 0 14 3 3 #"env"
0 0 28 3 2 #")]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"aEnv"
0 0 28 3 1 #" "
0 0 14 3 1 #"h"
0 0 28 3 1 #" "
0 0 14 3 4 #"rEnv"
0 0 28 3 3 #") ("
0 0 16 3 3 #"def"
0 0 28 3 1 #" "
0 0 14 3 4 #"hupd"
0 0 28 3 2 #" ("
0 0 14 3 8 #"hash-set"
0 0 28 3 1 #" "
0 0 14 3 1 #"h"
0 0 28 3 1 #" "
0 0 14 3 2 #"id"
0 0 28 3 1 #" "
0 0 14 3 3 #"val"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 20 #"                   ("
0 0 14 3 14 #"set-aEnv-hash!"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 1 #" "
0 0 14 3 4 #"hupd"
0 0 28 3 4 #")]))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 79 5 0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 26 #";; parse :: s-expr -> Expr"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 28 3 1 #" "
0 0 14 3 6 #"s-expr"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 5 #"match"
0 0 28 3 1 #" "
0 0 14 3 6 #"s-expr"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 24 3 1 #"'"
0 0 14 3 4 #"this"
0 0 28 3 2 #" ("
0 0 14 3 4 #"this"
0 0 28 3 2 #")]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 28 3 1 #" "
0 0 14 3 7 #"number?"
0 0 28 3 3 #") ("
0 0 14 3 3 #"num"
0 0 28 3 1 #" "
0 0 14 3 6 #"s-expr"
0 0 28 3 2 #")]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 28 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 28 3 3 #") ("
0 0 14 3 2 #"id"
0 0 28 3 1 #" "
0 0 14 3 6 #"s-expr"
0 0 28 3 2 #")]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 28 3 1 #" "
0 0 14 3 8 #"boolean?"
0 0 28 3 3 #") ("
0 0 14 3 4 #"bool"
0 0 28 3 1 #" "
0 0 14 3 6 #"s-expr"
0 0 28 3 2 #")]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 1 #"*"
0 0 28 3 1 #" "
0 0 14 3 1 #"l"
0 0 28 3 1 #" "
0 0 14 3 1 #"r"
0 0 28 3 3 #") ("
0 0 14 3 5 #"binop"
0 0 28 3 1 #" "
0 0 14 3 1 #"*"
0 0 28 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 28 3 1 #" "
0 0 14 3 1 #"l"
0 0 28 3 3 #") ("
0 0 14 3 5 #"parse"
0 0 28 3 1 #" "
0 0 14 3 1 #"r"
0 0 28 3 3 #"))]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 1 #"+"
0 0 28 3 1 #" "
0 0 14 3 1 #"l"
0 0 28 3 1 #" "
0 0 14 3 1 #"r"
0 0 28 3 3 #") ("
0 0 14 3 5 #"binop"
0 0 28 3 1 #" "
0 0 14 3 1 #"+"
0 0 28 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 28 3 1 #" "
0 0 14 3 1 #"l"
0 0 28 3 3 #") ("
0 0 14 3 5 #"parse"
0 0 28 3 1 #" "
0 0 14 3 1 #"r"
0 0 28 3 3 #"))]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 1 #"-"
0 0 28 3 1 #" "
0 0 14 3 1 #"l"
0 0 28 3 1 #" "
0 0 14 3 1 #"r"
0 0 28 3 3 #") ("
0 0 14 3 5 #"binop"
0 0 28 3 1 #" "
0 0 14 3 1 #"-"
0 0 28 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 28 3 1 #" "
0 0 14 3 1 #"l"
0 0 28 3 3 #") ("
0 0 14 3 5 #"parse"
0 0 28 3 1 #" "
0 0 14 3 1 #"r"
0 0 28 3 3 #"))]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 1 #"<"
0 0 28 3 1 #" "
0 0 14 3 1 #"l"
0 0 28 3 1 #" "
0 0 14 3 1 #"r"
0 0 28 3 3 #") ("
0 0 14 3 5 #"binop"
0 0 28 3 1 #" "
0 0 14 3 1 #"<"
0 0 28 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 28 3 1 #" "
0 0 14 3 1 #"l"
0 0 28 3 3 #") ("
0 0 14 3 5 #"parse"
0 0 28 3 1 #" "
0 0 14 3 1 #"r"
0 0 28 3 3 #"))]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 1 #"="
0 0 28 3 1 #" "
0 0 14 3 1 #"l"
0 0 28 3 1 #" "
0 0 14 3 1 #"r"
0 0 28 3 3 #") ("
0 0 14 3 5 #"binop"
0 0 28 3 1 #" "
0 0 14 3 1 #"="
0 0 28 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 28 3 1 #" "
0 0 14 3 1 #"l"
0 0 28 3 3 #") ("
0 0 14 3 5 #"parse"
0 0 28 3 1 #" "
0 0 14 3 1 #"r"
0 0 28 3 3 #"))]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 2 #"or"
0 0 28 3 1 #" "
0 0 14 3 1 #"l"
0 0 28 3 1 #" "
0 0 14 3 1 #"r"
0 0 28 3 3 #") ("
0 0 14 3 5 #"binop"
0 0 28 3 2 #" ("
0 0 16 3 2 #"\316\273"
0 0 28 3 2 #" ("
0 0 14 3 1 #"i"
0 0 28 3 1 #" "
0 0 14 3 1 #"d"
0 0 28 3 3 #") ("
0 0 14 3 2 #"or"
0 0 28 3 1 #" "
0 0 14 3 1 #"i"
0 0 28 3 1 #" "
0 0 14 3 1 #"d"
0 0 28 3 4 #")) ("
0 0 14 3 5 #"parse"
0 0 28 3 1 #" "
0 0 14 3 1 #"l"
0 0 28 3 3 #") ("
0 0 14 3 5 #"parse"
0 0 28 3 1 #" "
0 0 14 3 1 #"r"
0 0 28 3 3 #"))]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 3 #"and"
0 0 28 3 1 #" "
0 0 14 3 1 #"l"
0 0 28 3 1 #" "
0 0 14 3 1 #"r"
0 0 28 3 3 #") ("
0 0 14 3 5 #"binop"
0 0 28 3 2 #" ("
0 0 16 3 2 #"\316\273"
0 0 28 3 2 #" ("
0 0 14 3 1 #"i"
0 0 28 3 1 #" "
0 0 14 3 1 #"d"
0 0 28 3 3 #") ("
0 0 14 3 3 #"and"
0 0 28 3 1 #" "
0 0 14 3 1 #"i"
0 0 28 3 1 #" "
0 0 14 3 1 #"d"
0 0 28 3 4 #")) ("
0 0 14 3 5 #"parse"
0 0 28 3 1 #" "
0 0 14 3 1 #"l"
0 0 28 3 3 #") ("
0 0 14 3 5 #"parse"
0 0 28 3 1 #" "
0 0 14 3 1 #"r"
0 0 28 3 3 #"))]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 3 #"not"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 3 #") ("
0 0 14 3 4 #"unop"
0 0 28 3 1 #" "
0 0 14 3 3 #"not"
0 0 28 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 3 #"))]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 2 #"if"
0 0 28 3 1 #" "
0 0 14 3 1 #"c"
0 0 28 3 1 #" "
0 0 14 3 1 #"t"
0 0 28 3 1 #" "
0 0 14 3 1 #"f"
0 0 28 3 3 #") ("
0 0 14 3 5 #"my-if"
0 0 28 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 28 3 1 #" "
0 0 14 3 1 #"c"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 30 #"                             ("
0 0 14 3 5 #"parse"
0 0 28 3 1 #" "
0 0 14 3 1 #"t"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 30 #"                             ("
0 0 14 3 5 #"parse"
0 0 28 3 1 #" "
0 0 14 3 1 #"f"
0 0 28 3 3 #"))]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 4 #"seqn"
0 0 28 3 1 #" "
0 0 14 3 2 #"e1"
0 0 28 3 1 #" "
0 0 14 3 2 #"e2"
0 0 28 3 3 #") ("
0 0 14 3 4 #"seqn"
0 0 28 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 28 3 1 #" "
0 0 14 3 2 #"e1"
0 0 28 3 3 #") ("
0 0 14 3 5 #"parse"
0 0 28 3 1 #" "
0 0 14 3 2 #"e2"
0 0 28 3 3 #"))]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 16 3 5 #"local"
0 0 28 3 2 #" ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 1 #" "
0 0 14 3 3 #"..."
0 0 28 3 3 #")  "
0 0 14 3 1 #"b"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"     ("
0 0 14 3 4 #"lcal"
0 0 28 3 2 #" ("
0 0 14 3 3 #"map"
0 0 28 3 1 #" "
0 0 14 3 9 #"parse-def"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 3 #") ("
0 0 14 3 5 #"parse"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 3 #"))]"
0 0 28 29 1 #"\n"
0 0 28 3 4 #"    "
0 0 18 3 79
(6
 #"; To parse the object itself, we will use another function called par"
 #"se-member."
) 0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 6 #"object"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 1 #":"
0 0 28 3 1 #" "
0 0 14 3 6 #"target"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 1 #" "
0 0 14 3 3 #"..."
0 0 28 3 3 #") ("
0 0 14 3 6 #"object"
0 0 28 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 28 3 1 #" "
0 0 14 3 6 #"target"
0 0 28 3 3 #") ("
0 0 14 3 3 #"map"
0 0 28 3 1 #" "
0 0 14 3 12 #"parse-member"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 3 #"))]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 6 #"object"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 1 #" "
0 0 14 3 3 #"..."
0 0 28 3 3 #") ("
0 0 14 3 6 #"object"
0 0 28 3 1 #" "
0 0 24 3 2 #"#f"
0 0 28 3 2 #" ("
0 0 14 3 3 #"map"
0 0 28 3 1 #" "
0 0 14 3 12 #"parse-member"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 5 #"))]  "
0 0 18 3 19 #"; #f for delegation"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 3 #"set"
0 0 28 3 1 #" "
0 0 14 3 2 #"id"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 3 #") ("
0 0 14 3 3 #"set"
0 0 28 3 1 #" "
0 0 14 3 2 #"id"
0 0 28 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 4 #"))] "
0 0 18 3 7 #"; field"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 3 #"get"
0 0 28 3 1 #" "
0 0 14 3 2 #"id"
0 0 28 3 3 #") ("
0 0 14 3 3 #"get"
0 0 28 3 1 #" "
0 0 14 3 2 #"id"
0 0 28 3 3 #")] "
0 0 18 3 7 #"; field"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 4 #"send"
0 0 28 3 1 #" "
0 0 14 3 2 #"ob"
0 0 28 3 1 #" "
0 0 14 3 3 #"met"
0 0 28 3 1 #" "
0 0 14 3 3 #"val"
0 0 28 3 1 #" "
0 0 14 3 3 #"..."
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"     ("
0 0 14 3 4 #"send"
0 0 28 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 28 3 1 #" "
0 0 14 3 2 #"ob"
0 0 28 3 2 #") "
0 0 14 3 3 #"met"
0 0 28 3 2 #" ("
0 0 14 3 3 #"map"
0 0 28 3 1 #" "
0 0 14 3 5 #"parse"
0 0 28 3 1 #" "
0 0 14 3 3 #"val"
0 0 28 3 4 #"))] "
0 0 18 3 8 #"; method"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 12 #"shallow-copy"
0 0 28 3 1 #" "
0 0 14 3 4 #"expr"
0 0 28 3 3 #") ("
0 0 14 3 12 #"shallow-copy"
0 0 28 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 28 3 1 #" "
0 0 14 3 4 #"expr"
0 0 28 3 3 #"))]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 9 #"deep-copy"
0 0 28 3 1 #" "
0 0 14 3 4 #"expr"
0 0 28 3 3 #") ("
0 0 14 3 9 #"deep-copy"
0 0 28 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 28 3 1 #" "
0 0 14 3 4 #"expr"
0 0 28 3 3 #"))]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 3 #"fun"
0 0 28 3 1 #" "
0 0 14 3 4 #"vals"
0 0 28 3 1 #" "
0 0 14 3 4 #"expr"
0 0 28 3 2 #") "
0 0 18 3 19 #"; #f for delegation"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"     ("
0 0 14 3 6 #"object"
0 0 28 3 1 #" "
0 0 24 3 2 #"#f"
0 0 28 3 2 #" ("
0 0 14 3 4 #"list"
0 0 28 3 2 #" ("
0 0 14 3 12 #"parse-member"
0 0 28 3 2 #" ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 6 #"method"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 1 #"f"
0 0 28 3 1 #" "
0 0 14 3 4 #"vals"
0 0 28 3 1 #" "
0 0 14 3 4 #"expr"
0 0 28 3 6 #"))))] "
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 1 #" "
0 0 14 3 3 #"..."
0 0 28 3 3 #") ("
0 0 14 3 4 #"send"
0 0 28 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 28 3 2 #" ("
0 0 14 3 5 #"first"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 3 #")) "
0 0 24 3 1 #"'"
0 0 14 3 2 #"mf"
0 0 28 3 2 #" ("
0 0 14 3 3 #"map"
0 0 28 3 1 #" "
0 0 14 3 5 #"parse"
0 0 28 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 6 #")))]))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 29 #";; parse-def :: s-expr -> Def"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 9 #"parse-def"
0 0 28 3 1 #" "
0 0 14 3 6 #"s-expr"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 5 #"match"
0 0 28 3 1 #" "
0 0 14 3 6 #"s-expr"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 2 #"id"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 3 #") ("
0 0 14 3 6 #"my-def"
0 0 28 3 1 #" "
0 0 14 3 2 #"id"
0 0 28 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 5 #"))]))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 35 #";; parse-member :: s-expr -> Member"
0 0 28 29 1 #"\n"
0 0 18 3 45 #"; parses a member to it's corresponding type."
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 12 #"parse-member"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 5 #"match"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 5 #"field"
0 0 28 3 1 #" "
0 0 14 3 2 #"id"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"     ("
0 0 14 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 4 #"this"
0 0 28 3 1 #" "
0 0 14 3 2 #"id"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 10 #"         ("
0 0 14 3 5 #"error"
0 0 28 3 1 #" "
0 0 20 3 25 #"\"this is a reserved word\""
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 10 #"         ("
0 0 14 3 5 #"field"
0 0 28 3 1 #" "
0 0 14 3 2 #"id"
0 0 28 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 4 #")))]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 6 #"method"
0 0 28 3 1 #" "
0 0 14 3 2 #"id"
0 0 28 3 2 #" ("
0 0 14 3 4 #"list"
0 0 28 3 1 #" "
0 0 14 3 4 #"vals"
0 0 28 3 1 #" "
0 0 14 3 3 #"..."
0 0 28 3 2 #") "
0 0 14 3 4 #"body"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"     ("
0 0 14 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 4 #"this"
0 0 28 3 1 #" "
0 0 14 3 2 #"id"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 10 #"         ("
0 0 14 3 5 #"error"
0 0 28 3 1 #" "
0 0 20 3 25 #"\"this is a reserved word\""
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 10 #"         ("
0 0 14 3 6 #"method"
0 0 28 3 1 #" "
0 0 14 3 2 #"id"
0 0 28 3 1 #" "
0 0 14 3 4 #"vals"
0 0 28 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 28 3 1 #" "
0 0 14 3 4 #"body"
0 0 28 3 6 #")))]))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 53 #";; interp :: Expr Env Bool/ObjectV Bool/ObjectV-> Val"
0 0 28 29 1 #"\n"
0 0 18 3 85
(7
 #"; We add the element inObject to determine if we are inside an object"
 #". If we are not,"
) 0 0 28 29 1 #"\n"
0 0 18 3 76
(8
 #"; the value of inObject is false, if we are, the value is the object "
 #"itself."
) 0 0 28 29 1 #"\n"
0 0 18 3 81
(9
 #"; By the other hand, the element forwardObj determines if we are usin"
 #"g delegation"
) 0 0 28 29 1 #"\n"
0 0 18 3 32 #"; or not, and with which object."
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 28 3 1 #" "
0 0 14 3 4 #"expr"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 2 #" ["
0 0 14 3 8 #"inObject"
0 0 28 3 1 #" "
0 0 24 3 2 #"#f"
0 0 28 3 3 #"] ["
0 0 14 3 10 #"forwardObj"
0 0 28 3 1 #" "
0 0 24 3 2 #"#f"
0 0 28 3 2 #"])"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 5 #"match"
0 0 28 3 1 #" "
0 0 14 3 4 #"expr"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 3 #"num"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 3 #") ("
0 0 14 3 4 #"numV"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 2 #")]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"bool"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 3 #") ("
0 0 14 3 5 #"boolV"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 2 #")]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 5 #"binop"
0 0 28 3 1 #" "
0 0 14 3 1 #"f"
0 0 28 3 1 #" "
0 0 14 3 1 #"l"
0 0 28 3 1 #" "
0 0 14 3 1 #"r"
0 0 28 3 3 #") ("
0 0 14 3 8 #"make-val"
0 0 28 3 2 #" ("
0 0 14 3 1 #"f"
0 0 28 3 2 #" ("
0 0 14 3 8 #"open-val"
0 0 28 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 28 3 1 #" "
0 0 14 3 1 #"l"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 1 #" "
0 0 14 3 8 #"inObject"
0 0 28 3 1 #" "
0 0 14 3 10 #"forwardObj"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 33 #"                                ("
0 0 14 3 8 #"open-val"
0 0 28 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 28 3 1 #" "
0 0 14 3 1 #"r"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 1 #" "
0 0 14 3 8 #"inObject"
0 0 28 3 1 #" "
0 0 14 3 10 #"forwardObj"
0 0 28 3 5 #"))))]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"unop"
0 0 28 3 1 #" "
0 0 14 3 1 #"f"
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 3 #") ("
0 0 14 3 8 #"make-val"
0 0 28 3 2 #" ("
0 0 14 3 1 #"f"
0 0 28 3 2 #" ("
0 0 14 3 8 #"open-val"
0 0 28 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 28 3 1 #" "
0 0 14 3 1 #"s"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 1 #" "
0 0 14 3 8 #"inObject"
0 0 28 3 1 #" "
0 0 14 3 10 #"forwardObj"
0 0 28 3 5 #"))))]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 5 #"my-if"
0 0 28 3 1 #" "
0 0 14 3 1 #"c"
0 0 28 3 1 #" "
0 0 14 3 1 #"t"
0 0 28 3 1 #" "
0 0 14 3 1 #"f"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"     ("
0 0 16 3 3 #"def"
0 0 28 3 2 #" ("
0 0 14 3 5 #"boolV"
0 0 28 3 1 #" "
0 0 14 3 3 #"cnd"
0 0 28 3 3 #") ("
0 0 14 3 6 #"interp"
0 0 28 3 1 #" "
0 0 14 3 1 #"c"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 1 #" "
0 0 14 3 8 #"inObject"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"     ("
0 0 14 3 2 #"if"
0 0 28 3 1 #" "
0 0 14 3 3 #"cnd"
0 0 28 29 1 #"\n"
0 0 28 3 10 #"         ("
0 0 14 3 6 #"interp"
0 0 28 3 1 #" "
0 0 14 3 1 #"t"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 1 #" "
0 0 14 3 8 #"inObject"
0 0 28 3 1 #" "
0 0 14 3 10 #"forwardObj"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 10 #"         ("
0 0 14 3 6 #"interp"
0 0 28 3 1 #" "
0 0 14 3 1 #"f"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 1 #" "
0 0 14 3 8 #"inObject"
0 0 28 3 1 #" "
0 0 14 3 10 #"forwardObj"
0 0 28 3 3 #"))]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 2 #"id"
0 0 28 3 1 #" "
0 0 14 3 1 #"x"
0 0 28 3 3 #") ("
0 0 14 3 10 #"env-lookup"
0 0 28 3 1 #" "
0 0 14 3 1 #"x"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 2 #")]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"seqn"
0 0 28 3 1 #" "
0 0 14 3 5 #"expr1"
0 0 28 3 1 #" "
0 0 14 3 5 #"expr2"
0 0 28 3 3 #") ("
0 0 16 3 5 #"begin"
0 0 28 29 1 #"\n"
0 0 28 3 27 #"                          ("
0 0 14 3 6 #"interp"
0 0 28 3 1 #" "
0 0 14 3 5 #"expr1"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 1 #" "
0 0 14 3 8 #"inObject"
0 0 28 3 1 #" "
0 0 14 3 10 #"forwardObj"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 27 #"                          ("
0 0 14 3 6 #"interp"
0 0 28 3 1 #" "
0 0 14 3 5 #"expr2"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 1 #" "
0 0 14 3 8 #"inObject"
0 0 28 3 1 #" "
0 0 14 3 10 #"forwardObj"
0 0 28 3 3 #"))]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"lcal"
0 0 28 3 1 #" "
0 0 16 3 4 #"defs"
0 0 28 3 1 #" "
0 0 14 3 4 #"body"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"     ("
0 0 16 3 3 #"let"
0 0 28 3 3 #" (["
0 0 14 3 7 #"new-env"
0 0 28 3 2 #" ("
0 0 14 3 16 #"multi-extend-env"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 3 #"() "
0 0 24 3 1 #"'"
0 0 28 3 3 #"() "
0 0 14 3 3 #"env"
0 0 28 3 3 #")])"
0 0 28 29 1 #"\n"
0 0 28 3 8 #"       ("
0 0 14 3 8 #"for-each"
0 0 28 3 2 #" ("
0 0 16 3 2 #"\316\273"
0 0 28 3 1 #"("
0 0 14 3 1 #"x"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 20 #"                   ("
0 0 16 3 3 #"def"
0 0 28 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 28 3 1 #" "
0 0 14 3 2 #"id"
0 0 28 3 1 #" "
0 0 14 3 3 #"val"
0 0 28 3 3 #") ("
0 0 14 3 10 #"interp-def"
0 0 28 3 1 #" "
0 0 14 3 1 #"x"
0 0 28 3 1 #" "
0 0 14 3 7 #"new-env"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 20 #"                   ("
0 0 14 3 17 #"extend-frame-env!"
0 0 28 3 1 #" "
0 0 14 3 2 #"id"
0 0 28 3 1 #" "
0 0 14 3 3 #"val"
0 0 28 3 1 #" "
0 0 14 3 7 #"new-env"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 19 #"                   "
0 0 24 3 2 #"#t"
0 0 28 3 2 #") "
0 0 16 3 4 #"defs"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 8 #"       ("
0 0 14 3 6 #"interp"
0 0 28 3 1 #" "
0 0 14 3 4 #"body"
0 0 28 3 1 #" "
0 0 14 3 7 #"new-env"
0 0 28 3 1 #" "
0 0 14 3 8 #"inObject"
0 0 28 3 3 #"))]"
0 0 28 29 1 #"\n"
0 0 28 3 4 #"    "
0 0 18 3 47 #"; We extend the interpreter with the expression"
0 0 28 29 1 #"\n"
0 0 28 3 4 #"    "
0 0 18 3 69
(10
 #"; if we have a forward object, we return it, if we are not, we return"
) 0 0 28 29 1 #"\n"
0 0 28 3 4 #"    "
0 0 18 3 19 #"; the object saved."
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"this"
0 0 28 3 3 #") ("
0 0 14 3 2 #"if"
0 0 28 3 1 #" "
0 0 14 3 10 #"forwardObj"
0 0 28 3 1 #" "
0 0 14 3 10 #"forwardObj"
0 0 28 29 1 #"\n"
0 0 28 3 17 #"                ("
0 0 14 3 2 #"if"
0 0 28 3 1 #" "
0 0 14 3 8 #"inObject"
0 0 28 3 1 #" "
0 0 14 3 8 #"inObject"
0 0 28 29 1 #"\n"
0 0 28 3 21 #"                    ("
0 0 14 3 5 #"error"
0 0 28 3 1 #" "
0 0 20 3 32 #"\"this used outside of an object\""
0 0 28 3 4 #")))]"
0 0 28 29 1 #"\n"
0 0 28 3 4 #"    "
0 0 18 3 43 #"; if the target is not false, we iterp. it."
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 6 #"object"
0 0 28 3 1 #" "
0 0 14 3 6 #"target"
0 0 28 3 1 #" "
0 0 14 3 7 #"members"
0 0 28 3 3 #") ("
0 0 14 3 7 #"ObjectV"
0 0 28 3 2 #" ("
0 0 14 3 2 #"if"
0 0 28 3 1 #" "
0 0 14 3 6 #"target"
0 0 28 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 28 3 1 #" "
0 0 14 3 6 #"target"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 2 #") "
0 0 14 3 6 #"target"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 39 #"                                      ("
0 0 14 3 14 #"interp-members"
0 0 28 3 1 #" "
0 0 14 3 7 #"members"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 38 #"                                      "
0 0 14 3 3 #"env"
0 0 28 3 2 #")]"
0 0 28 29 1 #"\n"
0 0 28 3 4 #"    "
0 0 18 3 52 #"; if we are inside an object, we start the set case."
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 3 #"set"
0 0 28 3 1 #" "
0 0 14 3 1 #"x"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 3 #") ("
0 0 14 3 2 #"if"
0 0 28 3 1 #" "
0 0 14 3 8 #"inObject"
0 0 28 29 1 #"\n"
0 0 28 3 20 #"                   ("
0 0 14 3 10 #"interp-set"
0 0 28 3 1 #" "
0 0 14 3 1 #"x"
0 0 28 29 1 #"\n"
0 0 28 3 32 #"                               ("
0 0 14 3 6 #"interp"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 1 #" "
0 0 14 3 8 #"inObject"
0 0 28 3 1 #" "
0 0 14 3 10 #"forwardObj"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 32 #"                               ("
0 0 14 3 15 #"ObjectV-members"
0 0 28 3 1 #" "
0 0 14 3 8 #"inObject"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 20 #"                   ("
0 0 14 3 5 #"error"
0 0 28 3 1 #" "
0 0 20 3 31 #"\"set used outside of an object\""
0 0 28 3 3 #"))]"
0 0 28 29 1 #"\n"
0 0 28 3 4 #"    "
0 0 18 3 52 #"; if we are inside an object, we start the get case."
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 3 #"get"
0 0 28 3 1 #" "
0 0 14 3 2 #"id"
0 0 28 3 3 #") ("
0 0 14 3 2 #"if"
0 0 28 3 1 #" "
0 0 14 3 8 #"inObject"
0 0 28 29 1 #"\n"
0 0 28 3 19 #"                  ("
0 0 14 3 10 #"interp-get"
0 0 28 3 1 #" "
0 0 14 3 2 #"id"
0 0 28 3 2 #" ("
0 0 14 3 15 #"ObjectV-members"
0 0 28 3 1 #" "
0 0 14 3 8 #"inObject"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 19 #"                  ("
0 0 14 3 5 #"error"
0 0 28 3 1 #" "
0 0 20 3 31 #"\"get used outside of an object\""
0 0 28 3 3 #"))]"
0 0 28 29 1 #"\n"
0 0 28 3 4 #"    "
0 0 18 3 74
(11
 #"; first we search for the object and give it to the iterpreter of the"
 #" send"
) 0 0 28 29 1 #"\n"
0 0 28 3 4 #"    "
0 0 18 3 54 #"; case. This object is received as a secondary object."
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"send"
0 0 28 3 1 #" "
0 0 14 3 5 #"ob-id"
0 0 28 3 1 #" "
0 0 14 3 4 #"m-id"
0 0 28 3 1 #" "
0 0 14 3 4 #"vals"
0 0 28 3 3 #") ("
0 0 16 3 3 #"let"
0 0 28 3 3 #" (["
0 0 14 3 4 #"objV"
0 0 28 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 28 3 1 #" "
0 0 14 3 5 #"ob-id"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 1 #" "
0 0 14 3 8 #"inObject"
0 0 28 3 1 #" "
0 0 14 3 10 #"forwardObj"
0 0 28 3 3 #")])"
0 0 28 29 1 #"\n"
0 0 28 3 31 #"                              ("
0 0 14 3 11 #"interp-send"
0 0 28 3 1 #" "
0 0 14 3 4 #"m-id"
0 0 28 3 1 #" "
0 0 14 3 4 #"vals"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 1 #" "
0 0 14 3 4 #"objV"
0 0 28 3 1 #" "
0 0 14 3 8 #"inObject"
0 0 28 3 1 #" "
0 0 14 3 10 #"forwardObj"
0 0 28 3 3 #"))]"
0 0 28 29 1 #"\n"
0 0 28 3 4 #"    "
0 0 18 3 19 #"; part 3 functions "
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 12 #"shallow-copy"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 3 #") ("
0 0 16 3 3 #"def"
0 0 28 3 2 #" ("
0 0 14 3 7 #"ObjectV"
0 0 28 3 1 #" "
0 0 14 3 6 #"target"
0 0 28 3 1 #" "
0 0 14 3 7 #"members"
0 0 28 3 1 #" "
0 0 14 3 4 #"oenv"
0 0 28 3 3 #") ("
0 0 14 3 6 #"interp"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 1 #" "
0 0 14 3 8 #"inObject"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 23 #"                      ("
0 0 14 3 7 #"ObjectV"
0 0 28 3 1 #" "
0 0 14 3 6 #"target"
0 0 28 3 1 #" "
0 0 14 3 7 #"members"
0 0 28 3 1 #" "
0 0 14 3 4 #"oenv"
0 0 28 3 2 #")]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 9 #"deep-copy"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 3 #") ("
0 0 16 3 3 #"def"
0 0 28 3 1 #" "
0 0 14 3 6 #"object"
0 0 28 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 1 #" "
0 0 14 3 8 #"inObject"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 20 #"                   ("
0 0 14 3 12 #"copy-in-deep"
0 0 28 3 1 #" "
0 0 14 3 6 #"object"
0 0 28 3 4 #")]))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 71
(12
 #"; interp-members :: List(members) aEnv [List(members)] -> List(member"
 #"s)"
) 0 0 28 29 1 #"\n"
0 0 18 3 85
(13
 #"; this function takes a list of members and a enviroment, and returns"
 #" a dictionary of"
) 0 0 28 29 1 #"\n"
0 0 18 3 62
#"; the members, asociating their identifier with their meaning."
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 14 #"interp-members"
0 0 28 3 1 #" "
0 0 14 3 7 #"members"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 2 #" ["
0 0 14 3 4 #"acum"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 28 3 4 #"()])"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 5 #"match"
0 0 28 3 1 #" "
0 0 14 3 7 #"members"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"cons"
0 0 28 3 1 #" "
0 0 14 3 1 #"h"
0 0 28 3 1 #" "
0 0 14 3 1 #"t"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"     ("
0 0 16 3 5 #"match"
0 0 28 3 1 #" "
0 0 14 3 1 #"h"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"       "
0 0 18 3 43 #"; if we are in a field, we save it in a box"
0 0 28 29 1 #"\n"
0 0 28 3 9 #"       [("
0 0 14 3 5 #"field"
0 0 28 3 1 #" "
0 0 14 3 2 #"id"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 3 #") ("
0 0 14 3 14 #"interp-members"
0 0 28 3 1 #" "
0 0 14 3 1 #"t"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 28 3 2 #" ("
0 0 14 3 3 #"box"
0 0 28 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 28 3 1 #" "
0 0 14 3 2 #"id"
0 0 28 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 4 #"))) "
0 0 14 3 4 #"acum"
0 0 28 3 3 #"))]"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"       "
0 0 18 3 51 #"; if we are in a method, we just save it in a pair."
0 0 28 29 1 #"\n"
0 0 28 3 9 #"       [("
0 0 14 3 6 #"method"
0 0 28 3 1 #" "
0 0 14 3 2 #"id"
0 0 28 3 1 #" "
0 0 14 3 4 #"vals"
0 0 28 3 1 #" "
0 0 14 3 4 #"body"
0 0 28 3 3 #") ("
0 0 14 3 14 #"interp-members"
0 0 28 3 1 #" "
0 0 14 3 1 #"t"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 28 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 28 3 1 #" "
0 0 14 3 2 #"id"
0 0 28 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 28 3 1 #" "
0 0 14 3 4 #"vals"
0 0 28 3 1 #" "
0 0 14 3 4 #"body"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 58
#"                                                          "
0 0 14 3 4 #"acum"
0 0 28 3 5 #"))])]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 5 #"empty"
0 0 28 3 1 #" "
0 0 14 3 4 #"acum"
0 0 28 3 3 #"]))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 45 #"; interp-set :: id Expr List(members) -> Expr"
0 0 28 29 1 #"\n"
0 0 18 3 65
#"; this function interprets the expression in the case of an 'set'"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 10 #"interp-set"
0 0 28 3 1 #" "
0 0 14 3 1 #"x"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 1 #" "
0 0 14 3 7 #"members"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 5 #"match"
0 0 28 3 1 #" "
0 0 14 3 7 #"members"
0 0 28 29 1 #"\n"
0 0 28 3 4 #"    "
0 0 18 3 60
#"; if we found a member, we see if it is a box (field) or not"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"cons"
0 0 28 3 1 #" "
0 0 14 3 6 #"member"
0 0 28 3 1 #" "
0 0 14 3 6 #"others"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"     ("
0 0 14 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 4 #"box?"
0 0 28 3 1 #" "
0 0 14 3 6 #"member"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 10 #"         ("
0 0 14 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 28 3 1 #" "
0 0 14 3 1 #"x"
0 0 28 3 2 #" ("
0 0 14 3 3 #"car"
0 0 28 3 2 #" ("
0 0 14 3 5 #"unbox"
0 0 28 3 1 #" "
0 0 14 3 6 #"member"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 14 #"             ("
0 0 14 3 8 #"set-box!"
0 0 28 3 1 #" "
0 0 14 3 6 #"member"
0 0 28 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 28 3 1 #" "
0 0 14 3 1 #"x"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 13 #"             "
0 0 18 3 48 #"; if they are not the same id, we keep searching"
0 0 28 29 1 #"\n"
0 0 28 3 14 #"             ("
0 0 14 3 10 #"interp-set"
0 0 28 3 1 #" "
0 0 14 3 1 #"x"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 1 #" "
0 0 14 3 6 #"others"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 9 #"         "
0 0 18 3 39 #"; if it is not a box, we keep searching"
0 0 28 29 1 #"\n"
0 0 28 3 10 #"         ("
0 0 14 3 10 #"interp-set"
0 0 28 3 1 #" "
0 0 14 3 1 #"x"
0 0 28 3 1 #" "
0 0 14 3 1 #"e"
0 0 28 3 1 #" "
0 0 14 3 6 #"others"
0 0 28 3 3 #"))]"
0 0 28 29 1 #"\n"
0 0 28 3 4 #"    "
0 0 18 3 55 #"; if we reach the end of the list, we did not found it."
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 28 3 3 #") ("
0 0 14 3 5 #"error"
0 0 28 3 1 #" "
0 0 20 3 17 #"\"field not found\""
0 0 28 3 4 #")]))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 40 #"; interp-get :: id List(members) -> Expr"
0 0 28 29 1 #"\n"
0 0 18 3 65
#"; this function interprets the expression in the case of an 'get'"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 10 #"interp-get"
0 0 28 3 1 #" "
0 0 14 3 1 #"x"
0 0 28 3 1 #" "
0 0 14 3 7 #"members"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 5 #"match"
0 0 28 3 1 #" "
0 0 14 3 7 #"members"
0 0 28 29 1 #"\n"
0 0 28 3 4 #"    "
0 0 18 3 60
#"; if we found a member, we see if it is a box (field) or not"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"cons"
0 0 28 3 1 #" "
0 0 14 3 6 #"member"
0 0 28 3 1 #" "
0 0 14 3 6 #"others"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"     ("
0 0 14 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 4 #"box?"
0 0 28 3 1 #" "
0 0 14 3 6 #"member"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 10 #"         ("
0 0 14 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 28 3 1 #" "
0 0 14 3 1 #"x"
0 0 28 3 2 #" ("
0 0 14 3 3 #"car"
0 0 28 3 2 #" ("
0 0 14 3 5 #"unbox"
0 0 28 3 1 #" "
0 0 14 3 6 #"member"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 14 #"             ("
0 0 14 3 3 #"cdr"
0 0 28 3 2 #" ("
0 0 14 3 5 #"unbox"
0 0 28 3 1 #" "
0 0 14 3 6 #"member"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 13 #"             "
0 0 18 3 48 #"; if they are not the same id, we keep searching"
0 0 28 29 1 #"\n"
0 0 28 3 14 #"             ("
0 0 14 3 10 #"interp-get"
0 0 28 3 1 #" "
0 0 14 3 1 #"x"
0 0 28 3 1 #" "
0 0 14 3 6 #"others"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 9 #"         "
0 0 18 3 39 #"; if it is not a box, we keep searching"
0 0 28 29 1 #"\n"
0 0 28 3 10 #"         ("
0 0 14 3 10 #"interp-get"
0 0 28 3 1 #" "
0 0 14 3 1 #"x"
0 0 28 3 1 #" "
0 0 14 3 6 #"others"
0 0 28 3 3 #"))]"
0 0 28 29 1 #"\n"
0 0 28 3 4 #"    "
0 0 18 3 55 #"; if we reach the end of the list, we did not found it."
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 28 3 3 #") ("
0 0 14 3 5 #"error"
0 0 28 3 1 #" "
0 0 20 3 17 #"\"field not found\""
0 0 28 3 4 #")]))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 52 #"; interp-send :: id Expr Env ObjectV ObjectV -> Expr"
0 0 28 29 1 #"\n"
0 0 18 3 66
#"; this function interprets the expression in the case of an 'send'"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 11 #"interp-send"
0 0 28 3 1 #" "
0 0 14 3 4 #"m-id"
0 0 28 3 1 #" "
0 0 14 3 4 #"vals"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 1 #" "
0 0 14 3 7 #"sobject"
0 0 28 3 1 #" "
0 0 14 3 8 #"inObject"
0 0 28 3 1 #" "
0 0 14 3 10 #"forwardObj"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 2 #"  "
0 0 18 3 42 #"; if we found the method in the members..."
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 11 #"find-method"
0 0 28 3 1 #" "
0 0 14 3 4 #"m-id"
0 0 28 3 2 #" ("
0 0 14 3 15 #"ObjectV-members"
0 0 28 3 1 #" "
0 0 14 3 7 #"sobject"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"      "
0 0 18 3 66
#"; we save it and interprete the body of the method with the values"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"      "
0 0 18 3 26 #"; and the new environment."
0 0 28 29 1 #"\n"
0 0 28 3 7 #"      ("
0 0 16 3 3 #"let"
0 0 28 3 3 #" (["
0 0 14 3 6 #"method"
0 0 28 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 28 3 2 #" ("
0 0 14 3 11 #"find-method"
0 0 28 3 1 #" "
0 0 14 3 4 #"m-id"
0 0 28 3 2 #" ("
0 0 14 3 15 #"ObjectV-members"
0 0 28 3 1 #" "
0 0 14 3 7 #"sobject"
0 0 28 3 5 #")))])"
0 0 28 29 1 #"\n"
0 0 28 3 9 #"        ("
0 0 16 3 3 #"let"
0 0 28 3 3 #" (["
0 0 14 3 5 #"soenv"
0 0 28 3 2 #" ("
0 0 14 3 16 #"multi-extend-env"
0 0 28 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 28 3 1 #" "
0 0 24 3 1 #"'"
0 0 14 3 4 #"self"
0 0 28 3 2 #" ("
0 0 14 3 3 #"car"
0 0 28 3 1 #" "
0 0 14 3 6 #"method"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 40 #"                                       ("
0 0 14 3 4 #"cons"
0 0 28 3 1 #" "
0 0 14 3 7 #"sobject"
0 0 28 29 1 #"\n"
0 0 28 3 46 #"                                             ("
0 0 14 3 3 #"map"
0 0 28 3 2 #" ("
0 0 16 3 2 #"\316\273"
0 0 28 3 2 #" ("
0 0 14 3 1 #"x"
0 0 28 3 3 #") ("
0 0 14 3 6 #"interp"
0 0 28 3 1 #" "
0 0 14 3 1 #"x"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 1 #" "
0 0 14 3 8 #"inObject"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 49 #"                                                 "
0 0 14 3 4 #"vals"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 40 #"                                       ("
0 0 14 3 12 #"ObjectV-oenv"
0 0 28 3 1 #" "
0 0 14 3 7 #"sobject"
0 0 28 3 4 #"))])"
0 0 28 29 1 #"\n"
0 0 28 3 10 #"         ("
0 0 14 3 6 #"interp"
0 0 28 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 28 3 1 #" "
0 0 14 3 6 #"method"
0 0 28 3 2 #") "
0 0 14 3 5 #"soenv"
0 0 28 3 1 #" "
0 0 14 3 7 #"sobject"
0 0 28 3 1 #" "
0 0 14 3 10 #"forwardObj"
0 0 28 3 3 #")))"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"      "
0 0 18 3 66
#"; if we could'nt found the method, we keep searching in the target"
0 0 28 29 1 #"\n"
0 0 28 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 14 #"ObjectV-target"
0 0 28 3 1 #" "
0 0 14 3 7 #"sobject"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 10 #"          "
0 0 18 3 56 #"; the search depends if we have to use delegation or not"
0 0 28 29 1 #"\n"
0 0 28 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 28 3 1 #" "
0 0 14 3 10 #"forwardObj"
0 0 28 29 1 #"\n"
0 0 28 3 14 #"              "
0 0 18 3 49 #"; if we have delegation, we send the same object."
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              ("
0 0 14 3 11 #"interp-send"
0 0 28 3 1 #" "
0 0 14 3 4 #"m-id"
0 0 28 3 1 #" "
0 0 14 3 4 #"vals"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 2 #" ("
0 0 14 3 14 #"ObjectV-target"
0 0 28 3 1 #" "
0 0 14 3 7 #"sobject"
0 0 28 3 2 #") "
0 0 14 3 8 #"inObject"
0 0 28 3 1 #" "
0 0 14 3 10 #"forwardObj"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 15 #"              ("
0 0 14 3 11 #"interp-send"
0 0 28 3 1 #" "
0 0 14 3 4 #"m-id"
0 0 28 3 1 #" "
0 0 14 3 4 #"vals"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 2 #" ("
0 0 14 3 14 #"ObjectV-target"
0 0 28 3 1 #" "
0 0 14 3 7 #"sobject"
0 0 28 3 2 #") "
0 0 14 3 8 #"inObject"
0 0 28 3 1 #" "
0 0 14 3 7 #"sobject"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 11 #"          ("
0 0 14 3 5 #"error"
0 0 28 3 1 #" "
0 0 20 3 18 #"\"method not found\""
0 0 28 3 4 #"))))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 42 #"; find-method :: Symbol ObjectV -> method?"
0 0 28 29 1 #"\n"
0 0 18 3 84
(14
 #"; this methods finds a method identifier in the list of members of th"
 #"e given ObjectV"
) 0 0 28 29 1 #"\n"
0 0 18 3 63
#"; returns the method and the ObjectV where the method was found"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 11 #"find-method"
0 0 28 3 1 #" "
0 0 14 3 4 #"m-id"
0 0 28 3 1 #" "
0 0 14 3 7 #"members"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 5 #"match"
0 0 28 3 1 #" "
0 0 14 3 7 #"members"
0 0 28 29 1 #"\n"
0 0 28 3 4 #"    "
0 0 18 3 71
(15
 #"; if we reach the end of the list, we did not found it and return Fal"
 #"se"
) 0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 24 3 1 #"'"
0 0 28 3 3 #"() "
0 0 24 3 2 #"#f"
0 0 28 3 1 #"]"
0 0 28 29 1 #"\n"
0 0 28 3 4 #"    "
0 0 18 3 60
#"; if we found a member, we see if it is a box (field) or not"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"cons"
0 0 28 3 1 #" "
0 0 14 3 6 #"member"
0 0 28 3 1 #" "
0 0 14 3 6 #"others"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"     ("
0 0 14 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 4 #"box?"
0 0 28 3 1 #" "
0 0 14 3 6 #"member"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 9 #"         "
0 0 18 3 35 #"; if it is a box, we keep searching"
0 0 28 29 1 #"\n"
0 0 28 3 10 #"         ("
0 0 14 3 11 #"find-method"
0 0 28 3 1 #" "
0 0 14 3 4 #"m-id"
0 0 28 3 1 #" "
0 0 14 3 6 #"others"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 10 #"         ("
0 0 14 3 2 #"if"
0 0 28 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 28 3 1 #" "
0 0 14 3 4 #"m-id"
0 0 28 3 2 #" ("
0 0 14 3 3 #"car"
0 0 28 3 1 #" "
0 0 14 3 6 #"member"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 13 #"             "
0 0 14 3 6 #"member"
0 0 28 29 1 #"\n"
0 0 28 3 13 #"             "
0 0 18 3 48 #"; if they are not the same id, we keep searching"
0 0 28 29 1 #"\n"
0 0 28 3 14 #"             ("
0 0 14 3 11 #"find-method"
0 0 28 3 1 #" "
0 0 14 3 4 #"m-id"
0 0 28 3 1 #" "
0 0 14 3 6 #"others"
0 0 28 3 6 #")))]))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 36 #"; copy-in-deep :: ObjectV -> ObjectV"
0 0 28 29 1 #"\n"
0 0 18 3 42 #"; returns a deep-copy of the given object."
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 12 #"copy-in-deep"
0 0 28 3 1 #" "
0 0 14 3 6 #"object"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 5 #"match"
0 0 28 3 1 #" "
0 0 14 3 6 #"object"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 7 #"ObjectV"
0 0 28 3 1 #" "
0 0 14 3 6 #"target"
0 0 28 3 1 #" "
0 0 14 3 7 #"members"
0 0 28 3 1 #" "
0 0 14 3 4 #"oenv"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"     ("
0 0 14 3 2 #"if"
0 0 28 3 1 #" "
0 0 14 3 6 #"target"
0 0 28 29 1 #"\n"
0 0 28 3 10 #"         ("
0 0 14 3 7 #"ObjectV"
0 0 28 3 2 #" ("
0 0 14 3 12 #"copy-in-deep"
0 0 28 3 1 #" "
0 0 14 3 6 #"target"
0 0 28 3 3 #") ("
0 0 14 3 3 #"box"
0 0 28 3 2 #" ("
0 0 14 3 5 #"unbox"
0 0 28 3 1 #" "
0 0 14 3 7 #"members"
0 0 28 3 3 #")) "
0 0 14 3 4 #"oenv"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 10 #"         ("
0 0 14 3 7 #"ObjectV"
0 0 28 3 1 #" "
0 0 24 3 2 #"#f"
0 0 28 3 2 #" ("
0 0 14 3 3 #"box"
0 0 28 3 2 #" ("
0 0 14 3 5 #"unbox"
0 0 28 3 1 #" "
0 0 14 3 7 #"members"
0 0 28 3 3 #")) "
0 0 14 3 4 #"oenv"
0 0 28 3 5 #"))]))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 34 #";; open-val :: Val -> Scheme Value"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 8 #"open-val"
0 0 28 3 1 #" "
0 0 14 3 1 #"v"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 5 #"match"
0 0 28 3 1 #" "
0 0 14 3 1 #"v"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"numV"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 2 #") "
0 0 14 3 1 #"n"
0 0 28 3 1 #"]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 5 #"boolV"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 2 #") "
0 0 14 3 1 #"b"
0 0 28 3 1 #"]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    ))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 34 #";; make-val :: Scheme Value -> Val"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 8 #"make-val"
0 0 28 3 1 #" "
0 0 14 3 1 #"v"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 5 #"match"
0 0 28 3 1 #" "
0 0 14 3 1 #"v"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 28 3 1 #" "
0 0 14 3 7 #"number?"
0 0 28 3 3 #") ("
0 0 14 3 4 #"numV"
0 0 28 3 1 #" "
0 0 14 3 1 #"v"
0 0 28 3 2 #")]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 1 #"?"
0 0 28 3 1 #" "
0 0 14 3 8 #"boolean?"
0 0 28 3 3 #") ("
0 0 14 3 5 #"boolV"
0 0 28 3 1 #" "
0 0 14 3 1 #"v"
0 0 28 3 2 #")]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    ))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 33 #";; interp-def :: Def, Env -> Expr"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 10 #"interp-def"
0 0 28 3 1 #" "
0 0 14 3 5 #"a-def"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 5 #"match"
0 0 28 3 1 #" "
0 0 14 3 5 #"a-def"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 6 #"my-def"
0 0 28 3 1 #" "
0 0 14 3 2 #"id"
0 0 28 3 1 #" "
0 0 14 3 4 #"body"
0 0 28 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 28 3 1 #" "
0 0 14 3 2 #"id"
0 0 28 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 28 3 1 #" "
0 0 14 3 4 #"body"
0 0 28 3 1 #" "
0 0 14 3 3 #"env"
0 0 28 3 5 #"))]))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 23 #";; run :: s-expr -> Val"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 3 #"run"
0 0 28 3 1 #" "
0 0 14 3 6 #"s-expr"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 14 3 6 #"interp"
0 0 28 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 28 3 1 #" "
0 0 14 3 6 #"s-expr"
0 0 28 3 2 #") "
0 0 14 3 9 #"empty-env"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 29 1 #"\n"
0 0 18 3 2 #"#|"
0 0 18 29 1 #"\n"
0 0 18 3 36 #"run-val:: s-expr -> Scheme-Val + Val"
0 0 18 29 1 #"\n"
0 0 18 3 76
(16
 #"Versi\xC3\xB3n alternativa de run, que retorna valores de scheme para"
 #" primitivas y"
) 0 0 18 29 1 #"\n"
0 0 18 3 43 #"valores de MiniScheme para clases y objetos"
0 0 18 29 1 #"\n"
0 0 18 3 2 #"|#"
0 0 28 29 1 #"\n"
0 0 28 3 1 #"("
0 0 16 3 6 #"define"
0 0 28 3 2 #" ("
0 0 14 3 7 #"run-val"
0 0 28 3 1 #" "
0 0 14 3 6 #"s-expr"
0 0 28 3 1 #")"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 28 3 1 #" "
0 0 14 3 3 #"val"
0 0 28 3 2 #" ("
0 0 14 3 6 #"interp"
0 0 28 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 28 3 1 #" "
0 0 14 3 6 #"s-expr"
0 0 28 3 2 #") "
0 0 14 3 9 #"empty-env"
0 0 28 3 2 #"))"
0 0 28 29 1 #"\n"
0 0 28 3 3 #"  ("
0 0 16 3 5 #"match"
0 0 28 3 1 #" "
0 0 14 3 3 #"val"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 4 #"numV"
0 0 28 3 1 #" "
0 0 14 3 1 #"n"
0 0 28 3 2 #") "
0 0 14 3 1 #"n"
0 0 28 3 1 #"]"
0 0 28 29 1 #"\n"
0 0 28 3 6 #"    [("
0 0 14 3 5 #"boolV"
0 0 28 3 1 #" "
0 0 14 3 1 #"b"
0 0 28 3 2 #") "
0 0 14 3 1 #"b"
0 0 28 3 1 #"]"
0 0 28 29 1 #"\n"
0 0 28 3 5 #"    ["
0 0 14 3 1 #"x"
0 0 28 3 1 #" "
0 0 14 3 1 #"x"
0 0 28 3 3 #"]))"
0           0
